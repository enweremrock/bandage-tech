import { getLayout } from "@/components/main-layout";
import PageWrapper from "@/components/page-wrapper";
import {
  BreadCrum,
  CartPreview,
  ContactHeader,
  FeaturedItem,
  HeaderContent,
  Jump,
  NavHeader,
  ReviewNavigation,
  Vendor,
} from "@/components/section";
import { Toast } from "@/components/toast";
import { useMedia } from "@/lib/useMediaQuery";
import {
  cartSelector,
  fetchProductDetailAsync,
  productDetailSelector,
  toastSelector,
  useDispatch,
  useSelector,
} from "@/redux";
import { GetServerSidePropsContext, InferGetServerSidePropsType } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect } from "react";

export default function ProductDetail(
  props: InferGetServerSidePropsType<typeof getServerSideProps>
) {
  const isMobile = useMedia();
  const router = useRouter();
  const productId = props.slug;
  const dispatch = useDispatch();
  const toast = useSelector(toastSelector);
  const product = useSelector(productDetailSelector);
  const cart = useSelector(cartSelector);

  useEffect(() => {
    dispatch(
      fetchProductDetailAsync((router?.query?.productId as string) || productId)
    );
  }, [dispatch, productId, router]);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ContactHeader
        customStyle={{
          paddingInline: "19.5rem",
        }}
      >
        <HeaderContent page="product" />
      </ContactHeader>
      <NavHeader
        page="product"
        customStyle={{
          paddingInline: isMobile ? "3.5rem" : "19.5rem",
        }}
      />
      <BreadCrum />

      <CartPreview product={product?.data} status={product.status} />
      <ReviewNavigation />
      <Jump />
      <FeaturedItem showMore={false} page="product" />

      <Vendor />
      <Toast open={toast.isOpen} message={toast.message} />
    </>
  );
}

export const getServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const { query } = context;

  return {
    props: {
      slug: query.productId as string,
    },
  };
};

ProductDetail.PageWrapper = PageWrapper;
ProductDetail.getLayout = getLayout;
